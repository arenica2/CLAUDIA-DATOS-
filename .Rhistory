View(DATA_RISK_USER_INCENTIVES)
DATA_RISK_USER_INCENTIVES_PERCENT<-rbind(INC_2,INC_NO_2)
View(DATA_RISK_USER_INCENTIVES_PERCENT)
INCENTIVOS<-data[data$GROUP_NAME=='1']
INCENTIVOS_1<-aggregate(COUNT ~ PREDICTED_COLOR+USER_NAME, data=INCENTIVOS, FUN=sum)
INCENTIVOS_2<-aggregate(COUNT ~ PREDICTED_COLOR+USER_NAME+STATUS_INSPECCION, data=INCENTIVOS, FUN=sum)
CONSOLIDADO<-aggregate(COUNT~USER_NAME,data = INCENTIVOS_1,FUN = sum)
INC<-merge(CONSOLIDADO,INCENTIVOS_1,by = "USER_NAME",all = TRUE)
INC$PERCENTAGE<- (INC$COUNT.y / INC$COUNT.x) * 100
INC$INCENTIVOS<-unlist(1)
INC_2<-merge(CONSOLIDADO,INCENTIVOS_2,by = "USER_NAME",all = TRUE)
INC_2$PERCENTAGE<- (INC_2$COUNT.y / INC_2$COUNT.x) * 100
INC_2$INCENTIVOS<-unlist(1)
NO_INCENTIVOS<-data[data$GROUP_NAME=='0']
NO_INCENTIVOS_1<-aggregate(COUNT ~ PREDICTED_COLOR+USER_NAME, data=NO_INCENTIVOS, FUN=sum)
NO_INCENTIVOS_2<-aggregate(COUNT ~ PREDICTED_COLOR+USER_NAME+STATUS_INSPECCION, data=NO_INCENTIVOS, FUN=sum)
CONSOLIDADO_NO<-aggregate(COUNT~USER_NAME,data = NO_INCENTIVOS_1,FUN = sum)
INC_NO<-merge(CONSOLIDADO_NO,NO_INCENTIVOS_1,by = "USER_NAME",all = TRUE)
INC_NO$PERCENTAGE<- (INC_NO$COUNT.y / INC_NO$COUNT.x) * 100
INC_NO$INCENTIVOS<-unlist(0)
INC_NO_2<-merge(CONSOLIDADO,NO_INCENTIVOS_2,by = "USER_NAME",all = TRUE)
INC_NO_2$PERCENTAGE<- (INC_NO_2$COUNT.y / INC_NO_2$COUNT.x) * 100
INC_NO_2$INCENTIVOS<-unlist(0)
View(INC_NO_2)
DATA_RISK_USER_INCENTIVES<-rbind(INC,INC_NO)
setDT(DATA_RISK_USER_INCENTIVES)
DATA_RISK_USER_INCENTIVES<-DATA_RISK_USER_INCENTIVES[PREDICTED_COLOR=="#BD0026",PREDICTED_COLOR:="HIGHEST_RISK"]
DATA_RISK_USER_INCENTIVES<-DATA_RISK_USER_INCENTIVES[PREDICTED_COLOR=="#F03B20",PREDICTED_COLOR:="HIGH_RISK"]
DATA_RISK_USER_INCENTIVES<-DATA_RISK_USER_INCENTIVES[PREDICTED_COLOR=="#FD8D3C",PREDICTED_COLOR:="MEDIUM_RISK"]
DATA_RISK_USER_INCENTIVES<-DATA_RISK_USER_INCENTIVES[PREDICTED_COLOR=="#FECC5C",PREDICTED_COLOR:="LOW_RISK"]
DATA_RISK_USER_INCENTIVES<-DATA_RISK_USER_INCENTIVES[PREDICTED_COLOR=="#FFFFB2",PREDICTED_COLOR:="LOWEST_RISK"]
DATA_RISK_USER_INCENTIVES_PERCENT<-rbind(INC_2,INC_NO_2)
setDT(DATA_RISK_USER_INCENTIVES_PERCENT)
DATA_RISK_USER_INCENTIVES_PERCENT<-DATA_RISK_USER_INCENTIVES_PERCENT[PREDICTED_COLOR=="#BD0026",PREDICTED_COLOR:="HIGHEST_RISK"]
DATA_RISK_USER_INCENTIVES_PERCENT<-DATA_RISK_USER_INCENTIVES_PERCENT[PREDICTED_COLOR=="#F03B20",PREDICTED_COLOR:="HIGH_RISK"]
DATA_RISK_USER_INCENTIVES_PERCENT<-DATA_RISK_USER_INCENTIVES_PERCENT[PREDICTED_COLOR=="#FD8D3C",PREDICTED_COLOR:="MEDIUM_RISK"]
DATA_RISK_USER_INCENTIVES_PERCENT<-DATA_RISK_USER_INCENTIVES_PERCENT[PREDICTED_COLOR=="#FECC5C",PREDICTED_COLOR:="LOW_RISK"]
DATA_RISK_USER_INCENTIVES_PERCENT<-DATA_RISK_USER_INCENTIVES_PERCENT[PREDICTED_COLOR=="#FFFFB2",PREDICTED_COLOR:="LOWEST_RISK"]
View(DATA_RISK_USER_INCENTIVES_PERCENT)
write.csv(DATA_RISK_USER_INCENTIVES_PERCENT,"~/PETM-shiny/VectorPoint_Experiment_1_PAUCARPATA/RESULTS/DATA_USER_INCENTIVES_PERCENTAGE.csv",row.names = FALSE)
View(DATA_RISK_USER_INCENTIVES_PERCENT)
View(DATA_RISK_USER_INCENTIVES_PERCENT)
setnames(DATA_RISK_USER_INCENTIVES_PERCENT,COUNT.x,TOTAL_VISITAS)
setnames(DATA_RISK_USER_INCENTIVES_PERCENT,'COUNT.x','TOTAL_VISITAS')
setnames(DATA_RISK_USER_INCENTIVES_PERCENT,'COUNT.y','COUNT')
write.csv(DATA_RISK_USER_INCENTIVES_PERCENT,"~/PETM-shiny/VectorPoint_Experiment_1_PAUCARPATA/RESULTS/DATA_USER_INCENTIVES_PERCENTAGE.csv",row.names = FALSE)
View(DATA_RISK_USER_INCENTIVES_PERCENT)
View(data_resumen_semana)
View(INC)
View(INCENTIVOS_1)
View(DATA_RISK_USER_INCENTIVES_PERCENT)
sum(DATA_RISK_USER_INCENTIVES_PERCENT$STATUS_INSPECCION)
NON_INSPECTED_TRIANGLE<-matrix(c(A,28,62,0,B,30,69,1,C,45,59,0,D,7,52,1,E,25,72,0,F,27,51,1,
G,33,45,0,H,21,46,1,A,16,61,1,B,32,48,0,C,24,55,0,D,8,43,0,
E,18,57,1,F,28,47,0,G,23,55,1,H,23,55,0),'USER_NAME','HOUSES_BIGGEST_TRIANGLE','%TEN_PERCENT','INCENTIVOS')
NON_INSPECTED_TRIANGLE<-matrix(c('A',28,62,0,'B',30,69,1,'C',45,59,0,'D',7,52,1,'E',25,72,0,'F',27,51,1,
'G',33,45,0,'H',21,46,1,'A',16,61,1,'B',32,48,0,'C',24,55,0,'D',8,43,0,
'E',18,57,1,'F',28,47,0,'G',23,55,1,'H',23,55,0),'USER_NAME',
'HOUSES_BIGGEST_TRIANGLE','%TEN_PERCENT','INCENTIVOS')
NON_INSPECTED_TRIANGLE<-matrix(c('A',28,62,0,'B',30,69,1,'C',45,59,0,'D',7,52,1,'E',25,72,0,'F',27,51,1,
'G',33,45,0,'H',21,46,1,'A',16,61,1,'B',32,48,0,'C',24,55,0,'D',8,43,0,
'E',18,57,1,'F',28,47,0,'G',23,55,1,'H',23,55,0),ncol = 4,byrow = TRUE)
colnames(NON_INSPECTED_TRIANGLE)<-c('USER_NAME','HOUSES_BIGGEST_TRIANGLE','%TEN_PERCENT','INCENTIVOS')
View(NON_INSPECTED_TRIANGLE)
DATA_COMPLETE<-merge(DATA_RISK_USER_INCENTIVES_PERCENT,NON_INSPECTED_TRIANGLE,by = USER_NAME,all = TRUE)
DATA_COMPLETE<-merge(DATA_RISK_USER_INCENTIVES_PERCENT,NON_INSPECTED_TRIANGLE,by = 'USER_NAME',all = TRUE)
View(NON_INSPECTED_TRIANGLE)
write.csv(NON_INSPECTED_TRIANGLE,"~/PETM-shiny/VectorPoint_Experiment_1_PAUCARPATA/RESULTS/HOUSES_BIGGEST_TRIANGLE.csv",row.names = FALSE)
library(data.table)
R1<-fread("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-12-08.partitioned.csv")
View(R1)
R1<-R1[section=='0']
View(R1)
write.csv(R1,'PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-12-08_R1.partitioned.csv')
shiny::runApp('PETM-shiny/shiny')
write.csv(R1,'PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-12-08_R1.partitioned.csv',row.names = FALSE)
runApp('PETM-shiny/shiny')
runApp('PETM-shiny/shiny')
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-12-08.partitioned.csv")
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-12-08.partitioned.csv",sep = ' ')
R1<-R1[section=='0']
R1<-R1[R1$section=='0']
R1<-R1$section=='0'
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-12-08.partitioned.csv",sep = ' ')
R1<-(R1$section=='0')
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-12-08.partitioned.csv",sep = ' ')
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv",sep = ' ')
View(R1)
library(data.table)
R1<-fread("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv",sep = ' ')
R1<-fread("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv")
R1<-R1[]
R1<-R1[section=='0']
sapply(R1,class)
write.csv(R1,'PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned_R1.csv',row.names = FALSE)
runApp('PETM-shiny/shiny')
R1<-as.data.frame(R1)
write.csv(R1,'PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned_R1.csv',row.names = FALSE)
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv")
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv",sep = ' ')
R1<-R1[section=='0']
R1<-R1['section'=='0']
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv",sep = ' ')
R1<-R1[R1$section=='0']
View(R1)
R1<-[,(R1$section=='0')]
R1<-R1[which(R1$section=='0')]
R1<-R1[which(R1$section=='0'),]
write.csv(R1,'PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned_R1.csv',row.names = FALSE)
write.csv(R1,'PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned_R1.csv',row.names = FALSE)
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv",sep = ' ')
R1<-R1[which(R1$section=='0'),]
write.csv(R1,'PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned_R1.csv',row.names = FALSE)
runApp('PETM-shiny/shiny')
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv")
R1<-R1[which(R1$section=='0'),]
R1<-read.csv("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv")
View(R1)
R1<-fread("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned.csv")
View(R1)
R1<-R1[section=='0']
write.table(R1,'PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-09-14.partitioned_R1.csv',row.names = FALSE)
runApp('PETM-shiny/shiny')
R1<-fread("~/PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-12-15_06_DEC.partitioned.csv")
R1<-R1[section=='0']
write.table(R1,'PETM-shiny/graph_partition/newModelResults/MODEL_RESULTS_13.50_2017-12-15_06_DEC_R1.partitioned.csv',row.names = FALSE)
runApp('PETM-shiny/shiny')
runApp('PETM-shiny/shiny')
runApp('PETM-shiny/shiny')
# Casa Secreta
# Justin Sheen December 16, 2017
# For each house visited by an inspector in the active data, find how many
# were casa secretas, and which houses these were is also important, but
# will be random.
# So first, I can load the active data, then ask for which zone I am looking
# for. Then, for each inspected house in the active data, I can see what the
# color (risk level) is from the predicted prob, then I can make a new column
# and see whether or not each house is a casa secreta or not. Output the list
# of houses with whether or not they are a casa secreta or not as well as the
# search zone. So it could be a function as well.
set.seed(1)
homeDir <- path.expand('~')
setwd(homeDir) #sets the base path to the user's home directory, even in Windows.
# Sources
source(file.path(homeDir, "PETM-shiny/shiny/controller/global.R"))
source(file.path(homeDir, "PETM-shiny/casaSecreta/loadSaveMethodsCasaSecreta.R"))
# Libraries
library(RMySQL)
# Active data
LoadDataAPP <- function(databaseName = "Chagas_Arequipa", tableName="APP_INSPECTIONS") {
#Esta funcion retorna un los datos que se ingresaron en el APP
#
#ARGS
# databaseName = Nombre de la base de datos
# tableName = Nombre de la tabla
#
#RETURNS
# datos_app = datos ingresados por los usuarios en campo al APP
#
# Connect to the database
db <-
dbConnect(
MySQL(),
dbname = databaseName,
host = dbGlobalConfig$host,
port = dbGlobalConfig$port,
user = dbGlobalConfig$user,
password = dbGlobalConfig$password
)
# Construct the fetching query
query <- sprintf("SELECT * FROM %s", tableName)
# Submit the fetch query and disconnect
datos_app <- dbGetQuery(db, query)
#Desconectarnos de la base de datos
dbDisconnect(db)
return(datos_app)
}
getNumberSecretHouses <- function(){
numUser <- toString(readline(prompt="Enter user (e.g. 17): "))
date <- toString(readline(prompt="Enter date (e.g. 2017-12-15): "))
activedata <- LoadDataAPP()
activedata$FECHA <- as.character(activedata$FECHA)
activedata$FECHA <- gsub(' ', '', activedata$FECHA)
activedata$UNI_CODE <- as.character(activedata$UNI_CODE)
activedata$UNI_CODE <- gsub(' ', '', activedata$UNI_CODE)
activedata$STATUS_INSPECCION <- as.character(activedata$STATUS_INSPECCION)
activedata$STATUS_INSPECCION <- gsub(' ', '', activedata$STATUS_INSPECCION)
activedata$TEST_DATA <- as.character(activedata$TEST_DATA)
activedata$TEST_DATA <- gsub(' ', '', activedata$TEST_DATA)
activedata <- activedata[which(activedata$TEST_DATA == "0"),]
setDF(activedata) # for avoiding error of subsetting below
keep <- c("USER_NAME", "UNI_CODE", "FECHA", "STATUS_INSPECCION", "PREDICTED_COLOR")
activedata <- activedata[keep]
activedata$USER_NAME <- as.character(activedata$USER_NAME)
activedata$USER_NAME <- gsub(' ', '', activedata$USER_NAME)
activedata$UNI_CODE <- as.character(activedata$UNI_CODE)
activedata$UNI_CODE <- gsub(' ', '', activedata$UNI_CODE)
activedata$FECHA <- as.character(activedata$FECHA)
activedata$FECHA <- gsub(' ', '', activedata$FECHA)
activedata$STATUS_INSPECCION <- as.character(activedata$STATUS_INSPECCION)
activedata$STATUS_INSPECCION <- gsub(' ', '', activedata$STATUS_INSPECCION)
activedata$PREDICTED_COLOR <- as.character(activedata$PREDICTED_COLOR)
activedata$PREDICTED_COLOR <- gsub(' ', '', activedata$PREDICTED_COLOR)
sz1<-(numUser)
#sz1 <- paste0("r",numUser)
#sz2 <- paste0("R",numUser)
# activedata <- activedata[which((activedata$USER_NAME == sz1 | activedata$USER_NAME == sz2) &
#                                  (activedata$STATUS_INSPECCION == "inspeccion" | activedata$STATUS_INSPECCION == "I") &
#                                  activedata$FECHA == date),]
activedata <- activedata[which((activedata$USER_NAME == sz1) &
(activedata$STATUS_INSPECCION == "inspeccion" | activedata$STATUS_INSPECCION == "I") &
activedata$FECHA == date),]
activedata$casaSecreta <- FALSE
for (i in 1:nrow(activedata)) {
if (activedata$PREDICTED_COLOR[i] == "#FFFFB2") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.02) {
activedata$casaSecreta[i] <- TRUE
}
} else if (activedata$PREDICTED_COLOR[i] == "#FECC5C") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.025) {
activedata$casaSecreta[i] <- TRUE
}
} else if (activedata$PREDICTED_COLOR[i] == "#FD8D3C") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.033) {
activedata$casaSecreta[i] <- TRUE
}
} else if (activedata$PREDICTED_COLOR[i] == "#F03B20") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.05) {
activedata$casaSecreta[i] <- TRUE
}
} else if (activedata$PREDICTED_COLOR[i] == "#BD0026") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.1) {
activedata$casaSecreta[i] <- TRUE
}
} else {
print("error")
}
}
filename <- file.path("~/PETM-shiny/casaSecreta/casaSecretaResults", paste("CS_RESULTS_", sz1, "_", date, "_TODAYS.DATE.", Sys.Date(), ".csv", sep=""))
write.table(activedata, filename, row.names = F)
return(activedata)
}
getNumberSecretHouses()
getNumberSecretHouses()
getNumberSecretHouses()
getNumberSecretHouses()
getNumberSecretHouses()
getNumberSecretHouses()
runApp('PETM-shiny/shiny')
# Casa Secreta
# Justin Sheen December 16, 2017
# For each house visited by an inspector in the active data, find how many
# were casa secretas, and which houses these were is also important, but
# will be random.
# So first, I can load the active data, then ask for which zone I am looking
# for. Then, for each inspected house in the active data, I can see what the
# color (risk level) is from the predicted prob, then I can make a new column
# and see whether or not each house is a casa secreta or not. Output the list
# of houses with whether or not they are a casa secreta or not as well as the
# search zone. So it could be a function as well.
set.seed(1)
homeDir <- path.expand('~')
setwd(homeDir) #sets the base path to the user's home directory, even in Windows.
# Sources
source(file.path(homeDir, "PETM-shiny/shiny/controller/global.R"))
source(file.path(homeDir, "PETM-shiny/casaSecreta/loadSaveMethodsCasaSecreta.R"))
# Libraries
library(RMySQL)
# Active data
LoadDataAPP <- function(databaseName = "Chagas_Arequipa", tableName="APP_INSPECTIONS") {
#Esta funcion retorna un los datos que se ingresaron en el APP
#
#ARGS
# databaseName = Nombre de la base de datos
# tableName = Nombre de la tabla
#
#RETURNS
# datos_app = datos ingresados por los usuarios en campo al APP
#
# Connect to the database
db <-
dbConnect(
MySQL(),
dbname = databaseName,
host = dbGlobalConfig$host,
port = dbGlobalConfig$port,
user = dbGlobalConfig$user,
password = dbGlobalConfig$password
)
# Construct the fetching query
query <- sprintf("SELECT * FROM %s", tableName)
# Submit the fetch query and disconnect
datos_app <- dbGetQuery(db, query)
#Desconectarnos de la base de datos
dbDisconnect(db)
return(datos_app)
}
getNumberSecretHouses <- function(){
numUser <- toString(readline(prompt="Enter user (e.g. 17): "))
date <- toString(readline(prompt="Enter date (e.g. 2017-12-15): "))
activedata <- LoadDataAPP()
activedata$FECHA <- as.character(activedata$FECHA)
activedata$FECHA <- gsub(' ', '', activedata$FECHA)
activedata$UNI_CODE <- as.character(activedata$UNI_CODE)
activedata$UNI_CODE <- gsub(' ', '', activedata$UNI_CODE)
activedata$STATUS_INSPECCION <- as.character(activedata$STATUS_INSPECCION)
activedata$STATUS_INSPECCION <- gsub(' ', '', activedata$STATUS_INSPECCION)
activedata$TEST_DATA <- as.character(activedata$TEST_DATA)
activedata$TEST_DATA <- gsub(' ', '', activedata$TEST_DATA)
activedata <- activedata[which(activedata$TEST_DATA == "0"),]
setDF(activedata) # for avoiding error of subsetting below
keep <- c("USER_NAME", "UNI_CODE", "FECHA", "STATUS_INSPECCION", "PREDICTED_COLOR")
activedata <- activedata[keep]
activedata$USER_NAME <- as.character(activedata$USER_NAME)
activedata$USER_NAME <- gsub(' ', '', activedata$USER_NAME)
activedata$UNI_CODE <- as.character(activedata$UNI_CODE)
activedata$UNI_CODE <- gsub(' ', '', activedata$UNI_CODE)
activedata$FECHA <- as.character(activedata$FECHA)
activedata$FECHA <- gsub(' ', '', activedata$FECHA)
activedata$STATUS_INSPECCION <- as.character(activedata$STATUS_INSPECCION)
activedata$STATUS_INSPECCION <- gsub(' ', '', activedata$STATUS_INSPECCION)
activedata$PREDICTED_COLOR <- as.character(activedata$PREDICTED_COLOR)
activedata$PREDICTED_COLOR <- gsub(' ', '', activedata$PREDICTED_COLOR)
sz1<-(numUser)
#sz1 <- paste0("r",numUser)
#sz2 <- paste0("R",numUser)
# activedata <- activedata[which((activedata$USER_NAME == sz1 | activedata$USER_NAME == sz2) &
#                                  (activedata$STATUS_INSPECCION == "inspeccion" | activedata$STATUS_INSPECCION == "I") &
#                                  activedata$FECHA == date),]
activedata <- activedata[which((activedata$USER_NAME == sz1) &
(activedata$STATUS_INSPECCION == "inspeccion" | activedata$STATUS_INSPECCION == "I") &
activedata$FECHA == date),]
activedata$casaSecreta <- FALSE
for (i in 1:nrow(activedata)) {
if (activedata$PREDICTED_COLOR[i] == "#FFFFB2") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.02) {
activedata$casaSecreta[i] <- TRUE
}
} else if (activedata$PREDICTED_COLOR[i] == "#FECC5C") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.025) {
activedata$casaSecreta[i] <- TRUE
}
} else if (activedata$PREDICTED_COLOR[i] == "#FD8D3C") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.033) {
activedata$casaSecreta[i] <- TRUE
}
} else if (activedata$PREDICTED_COLOR[i] == "#F03B20") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.05) {
activedata$casaSecreta[i] <- TRUE
}
} else if (activedata$PREDICTED_COLOR[i] == "#BD0026") {
result <- runif(1, min = 0, max = 1)
print(result)
print(result <= 0.1)
if (result <= 0.1) {
activedata$casaSecreta[i] <- TRUE
}
} else {
print("error")
}
}
filename <- file.path("~/PETM-shiny/casaSecreta/casaSecretaResults", paste("CS_RESULTS_", sz1, "_", date, "_TODAYS.DATE.", Sys.Date(), ".csv", sep=""))
write.table(activedata, filename, row.names = F)
return(activedata)
}
getNumberSecretHouses()
getNumberSecretHouses()
getNumberSecretHouses()
getNumberSecretHouses()
library(ggplot2)
library(ggthemes)
library(extrafont)
library(plyr)
library(scales)
library(gridExtra)
library(grid)
#getting the data
library(data.table)
library(reshape)
library(reshape2)
library(tidyr)
data<-fread("~/PETM-shiny/BackUp_App_Inspections/Back_Up_App_Inspections_08_Feb_2018.csv")
setnames(data,old = 'UNI_CODE',new = 'UNICODE')
data$USER_NAME <- toupper(data$USER_NAME)
data<-data[STATUS_INSPECCION == "inspeccion",STATUS_INSPECCION:="I"]
data<-data[TEST_DATA==0]
data<-data[FECHA >='2018-01-15']
data<-fread("~/PETM-shiny/BackUp_App_Inspections/Back_Up_App_Inspections_08_Feb_2018.csv")
setnames(data,old = 'UNI_CODE',new = 'UNICODE')
data$USER_NAME <- toupper(data$USER_NAME)
data<-data[STATUS_INSPECCION == "inspeccion",STATUS_INSPECCION:="I"]
data<-data[TEST_DATA==0]
data<-data[FECHA >='2018-01-15']
head(data)
data[PREDICTED_COLOR=='#E31A1C']
View(data)
library(ggplot2)
library(ggmap)
library(mapproj)
library(Rcpp)
library(foreign)
library(maptools)
library(maps)
library(mapdata)
library(devtools)
library(animation)
library(rgdal)
library(data.table)
## Call the shp wher
ORV_we <-readOGR("output/ORV_we_final1.shp","ORV_we_final1")
map <- get_map(location = c(lon = 8, lat = 48),
zoom = 5, # 5 to set the map a country.
maptype = "terrain",     # setting easy to visualise
source = "google")       # the source to load the map from
mymap <- ggmap(map) + xlab("Longitude") + ylab("Latitude")
library(ggmap)
mymap <- ggmap(map) + xlab("Longitude") + ylab("Latitude")
map <- get_map(location = c(lon = 8, lat = 48),
zoom = 5, # 5 to set the map a country.
maptype = "terrain",     # setting easy to visualise
source = "google")       # the source to load the map from
mymap <- ggmap(map) + xlab("Longitude") + ylab("Latitude")
mymap <- mymap + geom_polygon(aes(x = long, y = lat),
fill = "blue", size=.2,
color="black",  data = eu.f, alpha=.4)
map <- get_map(location = c(lon =-71, lat = -16),
zoom = 5, # 5 to set the map a country.
maptype = "terrain",     # setting easy to visualise
source = "google")       # the source to load the map from
plotmap <- ggmap(map) + xlab("Longitude") + ylab("Latitude")
library(rgdal)     # R wrapper around GDAL/OGR
library(ggplot2)   # for general plotting
library(ggmaps)    # for fortifying shapefiles
plotmap
peru_1<- shapefile("~/Spatial-surveillance/MAP_CODES/PERU_SHAPES/PER_adm0.shp")
shapefile_df <- fortify(peru_1)
shapefile_df <- fortify(peru_1)
peru_1<- shapefile("~/Spatial-surveillance/MAP_CODES/PERU_SHAPES/PER_adm0.shp")
peru_2<-shapefile("~/Spatial-surveillance/MAP_CODES/PERU_SHAPES/PER_adm1.shp")
library(rgdal)     # R wrapper around GDAL/OGR
library(ggplot2)   # for general plotting
library(ggmaps)    # for fortifying shapefiles
install.packages("ggmaps")
library(ggmaps)    # for fortifying shapefiles
library(raster)
library(ggplot2)
library(data.table)
library(raster)
#library(car)
library(dplyr)
library(plyr)
#install.packages("tmap")
library(tmap)
library(rgdal)
library(ggmap)
setwd("~/CLAUDIA-DATOS-/")
library(shape)
library(tmap)
install.packages("shape")
library(shape)
library(tmap)
library(memisc)
install.packages("memisc")
plot(shapefile)
peru1_df <- peru_1@data
peru_1<- shapefile("~/Spatial-surveillance/MAP_CODES/PERU_SHAPES/PER_adm0.shp")
peru_2<-shapefile("~/Spatial-surveillance/MAP_CODES/PERU_SHAPES/PER_adm1.shp")
peru_3<-shapefile("~/Spatial-surveillance/MAP_CODES/PERU_SHAPES/PER_adm3.shp")
shapefile_df <- fortify(peru_1)
View(shapefile_df)
shapefile_df
map <- ggplot() +
geom_path(data = shapefile_df,
aes(x = long, y = lat, group = group),
color = 'gray', fill = 'white', size = .2)
print(map)
map_projected <- map +
coord_map()
print(map_projected)
tdcero <- tempdir() # save the directory
#peru0 <- getData('GADM', country=c('PER'), level=0, path=tdcero)
peru1 <- getData('GADM', country=c('PER'), level=1, path=tdcero)
peru2 <- getData('GADM', country=c('PER'), level=2, path=tdcero)
peru3 <- getData('GADM', country=c('PER'), level=3, path=tdcero)
plot(peru1)
